/**
 * Copyright (c) Jonas Franke and the ContentKit Contributors
 * SPDX-License-Identifier: BSD-3-Clause
 */

import type { ContentKitConfig } from "@ckjs/types";

export function generateTypeScriptTypesFile(
  config: ContentKitConfig,
  typesDir: string,
): string {
  const documentTypes = config.documentTypes
    .map(
      (docType) =>
        `export type ${docType.name} = {\n  _id: string;\n  _raw: any;\n  type: '${docType.name}';\n  raw: string;\n  html: string;\n  ${Object.entries(
          docType.fields,
        )
          .map(([fieldName, fieldType]) => {
            let type;
            if (fieldType.type === "date") {
              type = "Date";
            } else if (
              fieldType.type === "array" ||
              fieldType.type === "list"
            ) {
              const itemType = fieldType.items?.type || "any";
              type = `${itemType}[]`;
            } else {
              type = fieldType.type;
            }
            const optional = fieldType.required ? "" : " | undefined";
            return `${fieldName}: ${type}${optional};`;
          })
          .join("\n  ")}\n};`,
    )
    .join("\n\n");

  const documentTypeNames = config.documentTypes
    .map((docType) => `'${docType.name}'`)
    .join(" | ");
  const documentTypesUnion = config.documentTypes
    .map((docType) => docType.name)
    .join(" | ");

  return `// NOTE This file is auto-generated by ContentKit

${documentTypes}

export type DocumentTypes = ${documentTypesUnion};
export type DocumentTypeNames = ${documentTypeNames};

export type DataExports = {
  ${config.documentTypes.map((docType) => `all${docType.name}s: ${docType.name}[]`).join(";\n  ")};
  allDocuments: DocumentTypes[];
};
`;
}
